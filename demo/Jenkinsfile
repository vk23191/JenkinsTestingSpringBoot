pipeline {
     agent any
environment {
        TOMCAT_URL = 'http://localhost:8080'
        APP_NAME = 'my-webapp'
    }
    tools {
        // Specify the Maven installation
        maven 'Maven'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from GitHub repository
                git branch: 'main', credentialsId: 'e8dd3ede-7e98-45bf-820f-577a331cb564', url: 'https://github.com/vk23191/JenkinsTestingSpringBoot.git'
            }
        }

        stage('Test') {
            steps {
                dir('demo') {
                    // Execute Maven build commands
                    sh 'mvn clean test'
                }
            }
        }
stage('Build') {
            steps {
                dir('demo') {
                    // Execute Maven build commands
                    sh 'mvn clean package'
                }
            }
        }
        
		stage('Deploy') {
            steps {
                script {
                    def warFiles = findFiles(glob: 'demo/target/*.war')
                    if (warFiles) {
                        sshPublisher(
                            publishers: [
                                sshPublisherDesc(
                                    configName: 'UAT', // Name of the SSH configuration in Jenkins
                                    transfers: [
                                        sshTransfer(
                                            sourceFiles: warFiles[0].path, // Assuming there's only one WAR file
                                            remoteDirectory: '/opt/uat_sth_manak_8081/webapps/', // Destination directory on the remote server
											flatten: true
                                        )
                                    ]
                                )
                            ]
                        )
                    } else {
                        error 'No WAR files found!'
                    }
                }
            }
        }
        
    }

    post {
        success {
            echo 'Pipeline succeeded! This can include additional notifications or steps upon success.'
        }
        failure {
            echo 'Pipeline failed! This can include cleanup or notifications upon failure.'
        }
    }
}
